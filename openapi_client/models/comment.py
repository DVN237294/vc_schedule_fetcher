# coding: utf-8

"""
    vc_webapi

    Web API for the Virtual Classroom project  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: 237294@via.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Comment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'user_name': 'str',
        'message': 'str',
        'comment_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'user_name': 'userName',
        'message': 'message',
        'comment_time': 'commentTime'
    }

    def __init__(self, id=None, user_name=None, message=None, comment_time=None):  # noqa: E501
        """Comment - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._user_name = None
        self._message = None
        self._comment_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.user_name = user_name
        self.message = message
        if comment_time is not None:
            self.comment_time = comment_time

    @property
    def id(self):
        """Gets the id of this Comment.  # noqa: E501


        :return: The id of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.


        :param id: The id of this Comment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this Comment.  # noqa: E501


        :return: The user_name of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Comment.


        :param user_name: The user_name of this Comment.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def message(self):
        """Gets the message of this Comment.  # noqa: E501


        :return: The message of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Comment.


        :param message: The message of this Comment.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def comment_time(self):
        """Gets the comment_time of this Comment.  # noqa: E501


        :return: The comment_time of this Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._comment_time

    @comment_time.setter
    def comment_time(self, comment_time):
        """Sets the comment_time of this Comment.


        :param comment_time: The comment_time of this Comment.  # noqa: E501
        :type: datetime
        """

        self._comment_time = comment_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Comment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
