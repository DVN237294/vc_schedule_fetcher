# coding: utf-8

"""
    vc_webapi

    Web API for the Virtual Classroom project  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: 237294@via.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Session(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'date': 'datetime',
        'recordings': 'list[Video]',
        'participants': 'list[User]'
    }

    attribute_map = {
        'id': 'id',
        'date': 'date',
        'recordings': 'recordings',
        'participants': 'participants'
    }

    def __init__(self, id=None, date=None, recordings=None, participants=None):  # noqa: E501
        """Session - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._date = None
        self._recordings = None
        self._participants = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if date is not None:
            self.date = date
        self.recordings = recordings
        self.participants = participants

    @property
    def id(self):
        """Gets the id of this Session.  # noqa: E501


        :return: The id of this Session.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Session.


        :param id: The id of this Session.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def date(self):
        """Gets the date of this Session.  # noqa: E501


        :return: The date of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Session.


        :param date: The date of this Session.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def recordings(self):
        """Gets the recordings of this Session.  # noqa: E501


        :return: The recordings of this Session.  # noqa: E501
        :rtype: list[Video]
        """
        return self._recordings

    @recordings.setter
    def recordings(self, recordings):
        """Sets the recordings of this Session.


        :param recordings: The recordings of this Session.  # noqa: E501
        :type: list[Video]
        """

        self._recordings = recordings

    @property
    def participants(self):
        """Gets the participants of this Session.  # noqa: E501


        :return: The participants of this Session.  # noqa: E501
        :rtype: list[User]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this Session.


        :param participants: The participants of this Session.  # noqa: E501
        :type: list[User]
        """

        self._participants = participants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
