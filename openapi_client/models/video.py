# coding: utf-8

"""
    vc_webapi

    Web API for the Virtual Classroom project  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: 237294@via.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Video(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'properties': 'VideoProperties',
        'comments': 'list[Comment]',
        'name': 'str',
        'thumbnail_url': 'str',
        'record_time_utc': 'datetime',
        'stream_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'properties': 'properties',
        'comments': 'comments',
        'name': 'name',
        'thumbnail_url': 'thumbnailURL',
        'record_time_utc': 'recordTimeUtc',
        'stream_url': 'streamUrl'
    }

    def __init__(self, id=None, properties=None, comments=None, name=None, thumbnail_url=None, record_time_utc=None, stream_url=None):  # noqa: E501
        """Video - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._properties = None
        self._comments = None
        self._name = None
        self._thumbnail_url = None
        self._record_time_utc = None
        self._stream_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.properties = properties
        self.comments = comments
        self.name = name
        self.thumbnail_url = thumbnail_url
        self.record_time_utc = record_time_utc
        self.stream_url = stream_url

    @property
    def id(self):
        """Gets the id of this Video.  # noqa: E501


        :return: The id of this Video.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Video.


        :param id: The id of this Video.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def properties(self):
        """Gets the properties of this Video.  # noqa: E501


        :return: The properties of this Video.  # noqa: E501
        :rtype: VideoProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Video.


        :param properties: The properties of this Video.  # noqa: E501
        :type: VideoProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def comments(self):
        """Gets the comments of this Video.  # noqa: E501


        :return: The comments of this Video.  # noqa: E501
        :rtype: list[Comment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Video.


        :param comments: The comments of this Video.  # noqa: E501
        :type: list[Comment]
        """

        self._comments = comments

    @property
    def name(self):
        """Gets the name of this Video.  # noqa: E501


        :return: The name of this Video.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Video.


        :param name: The name of this Video.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this Video.  # noqa: E501


        :return: The thumbnail_url of this Video.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this Video.


        :param thumbnail_url: The thumbnail_url of this Video.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def record_time_utc(self):
        """Gets the record_time_utc of this Video.  # noqa: E501


        :return: The record_time_utc of this Video.  # noqa: E501
        :rtype: datetime
        """
        return self._record_time_utc

    @record_time_utc.setter
    def record_time_utc(self, record_time_utc):
        """Sets the record_time_utc of this Video.


        :param record_time_utc: The record_time_utc of this Video.  # noqa: E501
        :type: datetime
        """
        if record_time_utc is None:
            raise ValueError("Invalid value for `record_time_utc`, must not be `None`")  # noqa: E501

        self._record_time_utc = record_time_utc

    @property
    def stream_url(self):
        """Gets the stream_url of this Video.  # noqa: E501


        :return: The stream_url of this Video.  # noqa: E501
        :rtype: str
        """
        return self._stream_url

    @stream_url.setter
    def stream_url(self, stream_url):
        """Sets the stream_url of this Video.


        :param stream_url: The stream_url of this Video.  # noqa: E501
        :type: str
        """

        self._stream_url = stream_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Video):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
