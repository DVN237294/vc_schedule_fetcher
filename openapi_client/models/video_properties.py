# coding: utf-8

"""
    vc_webapi

    Web API for the Virtual Classroom project  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: 237294@via.dk
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VideoProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'width': 'int',
        'height': 'int',
        'virtual_file_path': 'str',
        'file_size': 'int',
        'mime_type': 'str',
        'duration': 'int',
        'container_ext': 'str'
    }

    attribute_map = {
        'id': 'id',
        'width': 'width',
        'height': 'height',
        'virtual_file_path': 'virtualFilePath',
        'file_size': 'fileSize',
        'mime_type': 'mimeType',
        'duration': 'duration',
        'container_ext': 'containerExt'
    }

    def __init__(self, id=None, width=None, height=None, virtual_file_path=None, file_size=None, mime_type=None, duration=None, container_ext=None):  # noqa: E501
        """VideoProperties - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._width = None
        self._height = None
        self._virtual_file_path = None
        self._file_size = None
        self._mime_type = None
        self._duration = None
        self._container_ext = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        self.virtual_file_path = virtual_file_path
        if file_size is not None:
            self.file_size = file_size
        self.mime_type = mime_type
        self.duration = duration
        self.container_ext = container_ext

    @property
    def id(self):
        """Gets the id of this VideoProperties.  # noqa: E501


        :return: The id of this VideoProperties.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VideoProperties.


        :param id: The id of this VideoProperties.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def width(self):
        """Gets the width of this VideoProperties.  # noqa: E501


        :return: The width of this VideoProperties.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this VideoProperties.


        :param width: The width of this VideoProperties.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this VideoProperties.  # noqa: E501


        :return: The height of this VideoProperties.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this VideoProperties.


        :param height: The height of this VideoProperties.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def virtual_file_path(self):
        """Gets the virtual_file_path of this VideoProperties.  # noqa: E501


        :return: The virtual_file_path of this VideoProperties.  # noqa: E501
        :rtype: str
        """
        return self._virtual_file_path

    @virtual_file_path.setter
    def virtual_file_path(self, virtual_file_path):
        """Sets the virtual_file_path of this VideoProperties.


        :param virtual_file_path: The virtual_file_path of this VideoProperties.  # noqa: E501
        :type: str
        """

        self._virtual_file_path = virtual_file_path

    @property
    def file_size(self):
        """Gets the file_size of this VideoProperties.  # noqa: E501


        :return: The file_size of this VideoProperties.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this VideoProperties.


        :param file_size: The file_size of this VideoProperties.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def mime_type(self):
        """Gets the mime_type of this VideoProperties.  # noqa: E501


        :return: The mime_type of this VideoProperties.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this VideoProperties.


        :param mime_type: The mime_type of this VideoProperties.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def duration(self):
        """Gets the duration of this VideoProperties.  # noqa: E501


        :return: The duration of this VideoProperties.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideoProperties.


        :param duration: The duration of this VideoProperties.  # noqa: E501
        :type: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def container_ext(self):
        """Gets the container_ext of this VideoProperties.  # noqa: E501


        :return: The container_ext of this VideoProperties.  # noqa: E501
        :rtype: str
        """
        return self._container_ext

    @container_ext.setter
    def container_ext(self, container_ext):
        """Sets the container_ext of this VideoProperties.


        :param container_ext: The container_ext of this VideoProperties.  # noqa: E501
        :type: str
        """

        self._container_ext = container_ext

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
